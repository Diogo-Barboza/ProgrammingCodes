.data
prompt_n: .asciiz "Digite o número de operações: "
prompt_xy: .asciiz "Digite os valores X e Y (1 ou 2): "
result: .asciiz "Resultado: "
newline: .asciiz "\n"

.text
.globl main

main:
    # Exibir prompt para número de operações
    li $v0, 4
    la $a0, prompt_n
    syscall

    # Ler número de operações (N)
    li $v0, 5
    syscall
    move $t0, $v0  # $t0 = N

    # Início do loop para ler pares X e Y
    li $t1, 0       # Contador i = 0
loop_start:
    beq $t1, $t0, end_loop  # Se i == N, sai do loop

    # Exibir prompt para valores X e Y
    li $v0, 4
    la $a0, prompt_xy
    syscall

    # Ler valor X
    li $v0, 5
    syscall
    move $t2, $v0  # $t2 = X

    # Ler valor Y
    li $v0, 5
    syscall
    move $t3, $v0  # $t3 = Y

    # Calcular XOR lógico
    # XOR lógico é Verdadeiro (2) se X != Y
    beq $t2, $t3, xor_false  # Se X == Y, resultado é 1 (Falso)
    li $t4, 2                # Caso contrário, resultado é 2 (Verdadeiro)
    j xor_done

xor_false:
    li $t4, 1                # Resultado é 1 (Falso)

xor_done:
    # Exibir resultado
    li $v0, 4
    la $a0, result
    syscall

    li $v0, 1
    move $a0, $t4  # Imprime o resultado
    syscall

    # Nova linha
    li $v0, 4
    la $a0, newline
    syscall

    # Incrementar contador e repetir
    addi $t1, $t1, 1
    j loop_start

end_loop:
    # Finalizar o programa
    li $v0, 10
    syscall